{
  "database": {
    "host": "localhost",
    "port": 5432,
    "database": "one_vault",
    "user": "postgres"
  },
  "queries": {
    "discover_login_table": "\n                    -- Discover the actual structure of login-related tables\n                    SELECT \n                        'TABLE: ' || table_name as info,\n                        column_name,\n                        data_type,\n                        is_nullable,\n                        column_default\n                    FROM information_schema.columns \n                    WHERE table_schema = 'raw' \n                    AND table_name LIKE '%login%'\n                    ORDER BY table_name, ordinal_position;\n                ",
    "show_last_login_safe": "\n                    -- Safe query to show last login without assuming column names\n                    -- 1. Show who logged in last\n                    SELECT \n                        'LAST LOGIN USER' as info_type,\n                        up.first_name || ' ' || up.last_name as full_name,\n                        up.email,\n                        uas.username,\n                        uas.last_login_date,\n                        uas.password_last_changed,\n                        EXTRACT(DAYS FROM (CURRENT_TIMESTAMP - uas.password_last_changed)) as password_age_days\n                    FROM auth.user_auth_s uas\n                    JOIN auth.user_h uh ON uas.user_hk = uh.user_hk\n                    JOIN auth.user_profile_s up ON uh.user_hk = up.user_hk\n                    WHERE uas.load_end_date IS NULL \n                    AND up.load_end_date IS NULL\n                    AND uas.last_login_date IS NOT NULL\n                    ORDER BY uas.last_login_date DESC\n                    LIMIT 1;\n                ",
    "show_password_storage": "\n                    -- Show where password data is stored for last login user\n                    WITH last_user AS (\n                        SELECT uas.user_hk, uas.username, up.email\n                        FROM auth.user_auth_s uas\n                        JOIN auth.user_h uh ON uas.user_hk = uh.user_hk\n                        JOIN auth.user_profile_s up ON uh.user_hk = up.user_hk\n                        WHERE uas.load_end_date IS NULL \n                        AND up.load_end_date IS NULL\n                        AND uas.last_login_date IS NOT NULL\n                        ORDER BY uas.last_login_date DESC\n                        LIMIT 1\n                    )\n                    SELECT \n                        'PASSWORD STORAGE' as info_type,\n                        'auth.user_auth_s' as table_name,\n                        'password_hash' as column_name,\n                        LENGTH(uas.password_hash) as stored_bytes,\n                        'SECURE BCRYPT HASH' as content_type,\n                        LEFT(encode(uas.password_hash, 'hex'), 20) || '...' as hash_preview\n                    FROM auth.user_auth_s uas\n                    JOIN last_user lu ON uas.user_hk = lu.user_hk\n                    WHERE uas.load_end_date IS NULL\n                    \n                    UNION ALL\n                    \n                    SELECT \n                        'PASSWORD SALT' as info_type,\n                        'auth.user_auth_s' as table_name,\n                        'password_salt' as column_name,\n                        LENGTH(uas.password_salt) as stored_bytes,\n                        'SECURE SALT' as content_type,\n                        LEFT(encode(uas.password_salt, 'hex'), 20) || '...' as hash_preview\n                    FROM auth.user_auth_s uas\n                    JOIN last_user lu ON uas.user_hk = lu.user_hk\n                    WHERE uas.load_end_date IS NULL;\n                ",
    "show_all_password_columns": "\n                    -- Show all password-related columns in database\n                    SELECT \n                        'PASSWORD COLUMNS' as category,\n                        table_schema || '.' || table_name as table_location,\n                        column_name,\n                        data_type,\n                        CASE \n                            WHEN column_name LIKE '%hash%' THEN '\u2705 SECURE HASH STORAGE'\n                            WHEN column_name LIKE '%salt%' THEN '\u2705 SECURE SALT STORAGE'\n                            WHEN column_name LIKE '%indicator%' THEN '\u2705 SAFE INDICATOR ONLY'\n                            WHEN column_name LIKE '%password%' AND data_type = 'bytea' THEN '\u2705 SECURE BINARY'\n                            WHEN column_name LIKE '%password%' THEN '\u26a0\ufe0f REVIEW NEEDED'\n                            ELSE '\ud83d\udccb OTHER'\n                        END as security_assessment\n                    FROM information_schema.columns \n                    WHERE LOWER(column_name) LIKE '%password%'\n                       OR LOWER(column_name) LIKE '%hash%'\n                       OR LOWER(column_name) LIKE '%salt%'\n                    AND table_schema NOT LIKE 'pg_%'\n                    AND table_schema != 'information_schema'\n                    ORDER BY table_schema, table_name, column_name;\n                "
  }
}