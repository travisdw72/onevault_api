#!/usr/bin/env python3
"""
TEST: Verify FIXED AI Observation Function
Tests realistic horse and camera scenarios that should now work!
"""

import psycopg2
import getpass
import json

def main():
    print("üöÄ TESTING FIXED AI OBSERVATION FUNCTION")
    print("üêé This should now work with horse and camera context!")
    print("=" * 60)
    
    password = getpass.getpass("Database password: ")
    
    try:
        conn = psycopg2.connect(
            host="localhost", port=5432, database="one_vault_site_testing",
            user="postgres", password=password
        )
        cursor = conn.cursor()
        print("‚úÖ Connected to database")
        
        # Get tenant
        cursor.execute("""
            SELECT th.tenant_bk
            FROM auth.tenant_h th
            JOIN auth.tenant_profile_s tps ON th.tenant_hk = tps.tenant_hk
            WHERE tps.tenant_name = '72 Industries LLC' 
            AND tps.load_end_date IS NULL
            LIMIT 1
        """)
        
        tenant_result = cursor.fetchone()
        if not tenant_result:
            print("‚ùå No tenant found")
            return
            
        tenant_bk = tenant_result[0]
        print(f"üè¢ Using tenant: {tenant_bk}")
        
        # Test scenarios that SHOULD NOW WORK with the fix
        success_scenarios = [
            {
                "name": "üêé Horse Limping Detection - WITH FULL CONTEXT",
                "description": "AI detects Thunder Bolt limping via Paddock Camera 03",
                "data": {
                    "tenantId": tenant_bk,
                    "observationType": "horse_limping_detected",
                    "severityLevel": "medium",
                    "entityId": "horse_thunder_bolt_001",  # THE HORSE
                    "sensorId": "paddock_camera_03",       # THE CAMERA  
                    "confidenceScore": 0.89,
                    "observationData": {
                        "limping_leg": "front_left",
                        "gait_analysis": "stride_shortened_15_percent",
                        "severity": "moderate_limp",
                        "location": "north_paddock",
                        "time_of_day": "morning_exercise"
                    },
                    "visualEvidence": {
                        "video_timestamp": "2025-01-07T10:30:45Z",
                        "camera_angle": "side_view",
                        "confidence_heatmap": "detected_limp_regions.jpg"
                    },
                    "recommendedActions": [
                        "Schedule veterinary examination within 24 hours",
                        "Restrict exercise until cleared by vet",
                        "Monitor for improvement over 48 hours",
                        "Check hoof for stones or foreign objects"
                    ]
                }
            },
            {
                "name": "üö∞ Water System Critical Alert - WITH EQUIPMENT CONTEXT", 
                "description": "AI detects water system failure in Barn 2",
                "data": {
                    "tenantId": tenant_bk,
                    "observationType": "equipment_malfunction",
                    "severityLevel": "critical",
                    "entityId": "water_trough_barn_2",     # THE EQUIPMENT
                    "sensorId": "water_level_sensor_b2",   # THE SENSOR
                    "confidenceScore": 0.95,
                    "observationData": {
                        "malfunction_type": "water_flow_stopped",
                        "last_normal_reading": "2025-01-07T08:15:00Z",
                        "current_water_level": "critically_low_12_percent",
                        "affected_stalls": ["B2-1", "B2-2", "B2-3", "B2-4"],
                        "estimated_animals_affected": 4
                    },
                    "recommendedActions": [
                        "IMMEDIATE: Provide manual water supply",
                        "Check pump electrical connections", 
                        "Inspect valve system for blockages",
                        "Contact maintenance team ASAP",
                        "Monitor all animals in Barn 2 for dehydration"
                    ]
                }
            },
            {
                "name": "üîí Security Breach Detection - WITH LOCATION CONTEXT",
                "description": "AI detects unauthorized entry at main barn entrance",
                "data": {
                    "tenantId": tenant_bk,
                    "observationType": "security_breach",
                    "severityLevel": "high",
                    "entityId": "barn_entrance_main",      # THE LOCATION
                    "sensorId": "security_camera_01",      # THE CAMERA
                    "confidenceScore": 0.92,
                    "observationData": {
                        "breach_type": "unauthorized_entry",
                        "detection_time": "2025-01-07T02:15:33Z",
                        "person_count": 2,
                        "entry_method": "forced_door",
                        "duration_seconds": 45,
                        "motion_patterns": "suspicious_behavior_detected"
                    },
                    "visualEvidence": {
                        "footage_clips": ["entrance_02_15_30.mp4", "entrance_02_15_45.mp4"],
                        "facial_recognition": "unknown_individuals",
                        "license_plates": "not_visible"
                    },
                    "recommendedActions": [
                        "URGENT: Alert security personnel immediately",
                        "Contact local law enforcement",
                        "Secure all high-value animals and equipment",
                        "Review all camera footage from past hour",
                        "Check inventory for missing items"
                    ]
                }
            }
        ]
        
        print(f"\nüß™ TESTING {len(success_scenarios)} SCENARIOS WITH FULL BUSINESS CONTEXT")
        print("üéØ These should ALL work now that the scope bug is fixed!")
        print("=" * 60)
        
        total_success = 0
        
        for i, scenario in enumerate(success_scenarios, 1):
            print(f"\n{i}Ô∏è‚É£ {scenario['name']}")
            print(f"   üìã {scenario['description']}")
            print(f"   üêé Entity: {scenario['data']['entityId']}")
            print(f"   üì∑ Sensor: {scenario['data']['sensorId']}")
            print(f"   üéØ Type: {scenario['data']['observationType']}")
            print(f"   ‚ö†Ô∏è Severity: {scenario['data']['severityLevel']}")
            print(f"   üîç Confidence: {scenario['data']['confidenceScore']}")
            
            try:
                cursor.execute("""
                    SELECT api.ai_log_observation(%s::jsonb)
                """, (json.dumps(scenario['data']),))
                
                result = cursor.fetchone()[0]
                
                if result.get('success'):
                    print("   ‚úÖ SUCCESS! Full context logged with entity/sensor data!")
                    print(f"   üìä Observation ID: {result.get('data', {}).get('observationId', 'N/A')}")
                    
                    if result.get('data', {}).get('alertCreated'):
                        print(f"   üö® ALERT CREATED: {result.get('data', {}).get('alertId', 'N/A')}")
                        if result.get('data', {}).get('escalationRequired'):
                            print("   üî• ESCALATION REQUIRED - High priority alert!")
                    
                    total_success += 1
                    
                    # Show what we can now track
                    print("   üìà BUSINESS VALUE UNLOCKED:")
                    print(f"      ‚Ä¢ Linked to specific entity: {scenario['data']['entityId']}")
                    print(f"      ‚Ä¢ Captured by sensor: {scenario['data']['sensorId']}")
                    print(f"      ‚Ä¢ AI confidence: {scenario['data']['confidenceScore']}")
                    print(f"      ‚Ä¢ Rich observation data: {len(scenario['data']['observationData'])} fields")
                    print(f"      ‚Ä¢ Recommended actions: {len(scenario['data']['recommendedActions'])} items")
                    
                else:
                    error = result.get('debug_info', {}).get('error', result.get('message', 'Unknown error'))
                    print(f"   ‚ùå FAILED: {error}")
                    if 'v_entity_hk' in str(error):
                        print("   üîß ERROR: Scope bug still not fixed!")
                        
            except Exception as e:
                print(f"   ‚ùå EXCEPTION: {e}")
        
        print(f"\n{'='*60}")
        if total_success == len(success_scenarios):
            print("üéâ COMPLETE SUCCESS! ALL AI OBSERVATIONS WORKING!")
            print("‚úÖ PostgreSQL scope bug FIXED")
            print("‚úÖ Entity context WORKING")  
            print("‚úÖ Sensor context WORKING")
            print("‚úÖ Rich observation data WORKING")
            print("‚úÖ Automatic alerts WORKING")
            print("‚úÖ Business intelligence UNLOCKED")
            
            print(f"\nüöÄ PRODUCTION STATUS: 4/4 FUNCTIONS OPERATIONAL")
            print("   ‚úÖ Site Event Tracking")
            print("   ‚úÖ System Health Monitoring")  
            print("   ‚úÖ API Token Generation")
            print("   ‚úÖ AI Observation Logging")
            
            print(f"\nüí∞ BUSINESS VALUE NOW AVAILABLE:")
            print("   üêé Individual horse health tracking")
            print("   üì∑ Camera detection accuracy analysis")
            print("   üìä AI confidence scoring and improvement")
            print("   üö® Automatic alert generation and escalation")
            print("   üìà Predictive health analytics")
            print("   üìã Veterinary documentation and history")
            print("   üîç Equipment failure prediction")
            print("   üõ°Ô∏è Security incident documentation")
            
            print(f"\nüéØ READY FOR PRODUCTION DEPLOYMENT!")
            
        else:
            print(f"‚ö†Ô∏è PARTIAL SUCCESS: {total_success}/{len(success_scenarios)} scenarios working")
            print("üîß May need additional debugging")
            
        cursor.close()
        conn.close()
        
    except Exception as e:
        print(f"‚ùå Test failed: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main() 