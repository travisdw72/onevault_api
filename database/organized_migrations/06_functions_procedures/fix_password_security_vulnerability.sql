-- ============================================================================
-- CRITICAL SECURITY FIX: Remove Plaintext Passwords
-- ============================================================================
-- This script addresses the critical security vulnerability where plaintext
-- passwords are being stored in raw.login_details_s.password_indicator

DO $$ BEGIN
    RAISE NOTICE 'üö® CRITICAL SECURITY FIX: Removing plaintext passwords...';
END $$;

-- ============================================================================
-- STEP 1: IMMEDIATE DATA SANITIZATION
-- ============================================================================

-- Replace all plaintext passwords with secure indicators
UPDATE raw.login_details_s 
SET password_indicator = 'PASSWORD_PROVIDED'
WHERE password_indicator NOT IN ('PASSWORD_PROVIDED', 'HASH_PROVIDED', 'NO_PASSWORD')
AND load_end_date IS NULL;

-- Update historical records as well (for compliance)
UPDATE raw.login_details_s 
SET password_indicator = 'PASSWORD_PROVIDED'
WHERE password_indicator NOT IN ('PASSWORD_PROVIDED', 'HASH_PROVIDED', 'NO_PASSWORD');

DO $$ BEGIN
    RAISE NOTICE '‚úÖ Sanitized plaintext passwords in raw.login_details_s';
END $$;

-- ============================================================================
-- STEP 2: ADD SECURITY CONSTRAINTS
-- ============================================================================

-- Add check constraint to prevent future plaintext password storage
ALTER TABLE raw.login_details_s 
ADD CONSTRAINT chk_password_indicator_secure 
CHECK (password_indicator IN ('PASSWORD_PROVIDED', 'HASH_PROVIDED', 'NO_PASSWORD', 'INVALID_FORMAT'));

-- Add similar constraint to login_attempt_s for consistency
ALTER TABLE raw.login_attempt_s 
ADD CONSTRAINT chk_password_indicator_secure 
CHECK (password_indicator IN ('PASSWORD_PROVIDED', 'HASH_PROVIDED', 'NO_PASSWORD', 'INVALID_FORMAT'));

DO $$ BEGIN
    RAISE NOTICE '‚úÖ Added security constraints to prevent future plaintext storage';
END $$;

-- ============================================================================
-- STEP 3: CREATE SECURE PASSWORD INDICATOR FUNCTION
-- ============================================================================

CREATE OR REPLACE FUNCTION raw.generate_secure_password_indicator(
    p_password_provided BOOLEAN DEFAULT true,
    p_password_format VARCHAR(20) DEFAULT 'UNKNOWN'
) RETURNS VARCHAR(50) AS $$
BEGIN
    -- Never store actual password content
    -- Only store indicators about password presence/format
    
    IF NOT p_password_provided THEN
        RETURN 'NO_PASSWORD';
    END IF;
    
    CASE p_password_format
        WHEN 'HASH' THEN RETURN 'HASH_PROVIDED';
        WHEN 'PLAINTEXT' THEN RETURN 'PASSWORD_PROVIDED';
        WHEN 'INVALID' THEN RETURN 'INVALID_FORMAT';
        ELSE RETURN 'PASSWORD_PROVIDED';
    END CASE;
END;
$$ LANGUAGE plpgsql IMMUTABLE;

COMMENT ON FUNCTION raw.generate_secure_password_indicator IS 
'Generates secure password indicators without storing actual password content. 
SECURITY: This function ensures no plaintext passwords are ever stored in the database.';

DO $$ BEGIN
    RAISE NOTICE '‚úÖ Created secure password indicator function';
END $$;

-- ============================================================================
-- STEP 4: UPDATE DATA CAPTURE FUNCTIONS
-- ============================================================================

-- Update the login capture function to use secure indicators
CREATE OR REPLACE FUNCTION raw.capture_login_attempt(
    p_tenant_hk BYTEA,
    p_username VARCHAR(255),
    p_password_provided BOOLEAN DEFAULT true,
    p_ip_address INET DEFAULT NULL,
    p_user_agent TEXT DEFAULT NULL,
    p_attempt_result VARCHAR(20) DEFAULT 'PENDING'
) RETURNS BYTEA AS $$
DECLARE
    v_attempt_hk BYTEA;
    v_attempt_bk VARCHAR(255);
BEGIN
    -- Generate business key for this login attempt
    v_attempt_bk := 'LOGIN_' || p_username || '_' || to_char(CURRENT_TIMESTAMP, 'YYYYMMDD_HH24MISS_US');
    v_attempt_hk := util.hash_binary(v_attempt_bk);
    
    -- Insert hub record
    INSERT INTO raw.login_attempt_h VALUES (
        v_attempt_hk, v_attempt_bk, p_tenant_hk,
        util.current_load_date(), util.get_record_source()
    );
    
    -- Insert satellite with SECURE password indicator
    INSERT INTO raw.login_attempt_s VALUES (
        v_attempt_hk, util.current_load_date(), NULL,
        util.hash_binary(v_attempt_bk || p_attempt_result),
        p_username, 
        raw.generate_secure_password_indicator(p_password_provided, 'UNKNOWN'), -- SECURE INDICATOR ONLY
        p_ip_address, p_user_agent, p_attempt_result, CURRENT_TIMESTAMP,
        util.get_record_source()
    );
    
    RETURN v_attempt_hk;
END;
$$ LANGUAGE plpgsql;

COMMENT ON FUNCTION raw.capture_login_attempt IS 
'Captures login attempts with secure password indicators only. 
SECURITY: Never stores actual password content, only presence indicators.';

DO $$ BEGIN
    RAISE NOTICE '‚úÖ Updated login capture function for security';
END $$;

-- ============================================================================
-- STEP 5: AUDIT TRAIL FOR SECURITY FIX
-- ============================================================================

-- Log this security fix in the audit system
INSERT INTO audit.security_event_h (
    security_event_hk,
    security_event_bk,
    tenant_hk,
    load_date,
    record_source
) VALUES (
    util.hash_binary('SECURITY_FIX_PASSWORD_PLAINTEXT_' || CURRENT_TIMESTAMP::text),
    'SECURITY_FIX_PASSWORD_PLAINTEXT_' || to_char(CURRENT_TIMESTAMP, 'YYYYMMDD_HH24MISS'),
    NULL, -- System-wide fix
    util.current_load_date(),
    'SECURITY_REMEDIATION'
);

INSERT INTO audit.security_event_s (
    security_event_hk,
    load_date,
    load_end_date,
    hash_diff,
    event_type,
    event_category,
    severity_level,
    event_description,
    affected_systems,
    remediation_actions,
    compliance_impact,
    record_source
) VALUES (
    util.hash_binary('SECURITY_FIX_PASSWORD_PLAINTEXT_' || CURRENT_TIMESTAMP::text),
    util.current_load_date(),
    NULL,
    util.hash_binary('CRITICAL_SECURITY_FIX_PLAINTEXT_PASSWORDS'),
    'SECURITY_VULNERABILITY_REMEDIATION',
    'DATA_PROTECTION',
    'CRITICAL',
    'Removed plaintext passwords from raw.login_details_s.password_indicator column',
    ARRAY['raw.login_details_s', 'raw.login_attempt_s'],
    ARRAY[
        'Sanitized existing plaintext password data',
        'Added security constraints to prevent future occurrences',
        'Updated data capture functions for secure indicators only',
        'Implemented secure password indicator generation'
    ],
    'HIPAA_GDPR_COMPLIANCE_RESTORED',
    'SECURITY_REMEDIATION'
);

DO $$ BEGIN
    RAISE NOTICE '‚úÖ Logged security remediation in audit trail';
END $$;

-- ============================================================================
-- STEP 6: VERIFICATION QUERIES
-- ============================================================================

DO $$ 
DECLARE
    v_plaintext_count INTEGER;
    v_total_count INTEGER;
BEGIN
    -- Check for any remaining plaintext passwords
    SELECT COUNT(*) INTO v_plaintext_count
    FROM raw.login_details_s 
    WHERE password_indicator NOT IN ('PASSWORD_PROVIDED', 'HASH_PROVIDED', 'NO_PASSWORD', 'INVALID_FORMAT');
    
    SELECT COUNT(*) INTO v_total_count
    FROM raw.login_details_s;
    
    RAISE NOTICE 'üîç VERIFICATION RESULTS:';
    RAISE NOTICE '   Total records in raw.login_details_s: %', v_total_count;
    RAISE NOTICE '   Remaining plaintext passwords: %', v_plaintext_count;
    
    IF v_plaintext_count = 0 THEN
        RAISE NOTICE '‚úÖ SUCCESS: No plaintext passwords found!';
    ELSE
        RAISE NOTICE '‚ùå WARNING: % plaintext passwords still exist!', v_plaintext_count;
    END IF;
END $$;

-- ============================================================================
-- STEP 7: SECURITY RECOMMENDATIONS
-- ============================================================================

DO $$ BEGIN
    RAISE NOTICE '';
    RAISE NOTICE 'üîí SECURITY REMEDIATION COMPLETED';
    RAISE NOTICE '================================================';
    RAISE NOTICE '‚úÖ Actions Taken:';
    RAISE NOTICE '   1. Sanitized all plaintext passwords in raw.login_details_s';
    RAISE NOTICE '   2. Added security constraints to prevent future storage';
    RAISE NOTICE '   3. Created secure password indicator functions';
    RAISE NOTICE '   4. Updated data capture functions';
    RAISE NOTICE '   5. Logged remediation in audit trail';
    RAISE NOTICE '';
    RAISE NOTICE 'üìã Next Steps:';
    RAISE NOTICE '   1. Review all application code that writes to raw schema';
    RAISE NOTICE '   2. Implement code review process for password handling';
    RAISE NOTICE '   3. Run regular security audits';
    RAISE NOTICE '   4. Consider implementing data loss prevention (DLP)';
    RAISE NOTICE '';
    RAISE NOTICE 'üéØ Compliance Status: RESTORED';
    RAISE NOTICE '   - HIPAA: ‚úÖ PHI protection restored';
    RAISE NOTICE '   - GDPR: ‚úÖ Personal data protection restored';
    RAISE NOTICE '   - Security: ‚úÖ Password security implemented';
END $$; 