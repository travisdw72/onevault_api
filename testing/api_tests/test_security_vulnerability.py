#!/usr/bin/env python3
"""
Security Vulnerability Test
===========================
Demonstrates the cross-tenant login attack vector
"""
import requests
import json
from datetime import datetime

API_BASE_URL = "https://onevault-api.onrender.com"

def test_cross_tenant_attack():
    """Test the cross-tenant login vulnerability"""
    print("üö® TESTING CROSS-TENANT SECURITY VULNERABILITY")
    print("=" * 60)
    
    # Scenario: Someone at theonespaoregon.com tries to login with travis@gmail.com credentials
    attack_scenarios = [
        {
            "name": "Cross-Tenant Attack - Personal Email on Business Domain",
            "description": "Attacker uses travisdwoodward72@gmail.com to access The One Spa Oregon",
            "username": "travisdwoodward72@gmail.com",
            "password": "MySecurePassword321",  # Would be the actual password
            "target_domain": "theonespaoregon.com",
            "expected": "SHOULD BE BLOCKED",
            "actual": "WILL LIKELY SUCCEED"
        },
        {
            "name": "Cross-Tenant Attack - Business Email on Personal Domain", 
            "description": "Attacker uses travis@theonespaoregon.com to access personal spa",
            "username": "travis@theonespaoregon.com", 
            "password": "!@m1cor1013oS",
            "target_domain": "myPersonalSpa.com",
            "expected": "SHOULD BE BLOCKED",
            "actual": "WILL LIKELY SUCCEED"
        }
    ]
    
    for scenario in attack_scenarios:
        print(f"\nüìç {scenario['name']}")
        print(f"   Description: {scenario['description']}")
        print(f"   Expected: {scenario['expected']}")
        print(f"   Testing with: {scenario['username']}")
        
        try:
            # This simulates someone on the target domain trying to login
            response = requests.post(
                f"{API_BASE_URL}/api/v1/auth/login",
                headers={
                    "Content-Type": "application/json",
                    # In real scenario, this would come from the domain's frontend
                    "Origin": f"https://{scenario['target_domain']}",
                    "Referer": f"https://{scenario['target_domain']}/login"
                },
                json={
                    "username": scenario['username'],
                    "password": "test_password"  # Using test password for demo
                },
                timeout=15
            )
            
            print(f"   Status: {response.status_code}")
            
            if response.status_code == 200:
                data = response.json()
                user_data = data.get('data', {}).get('user_data', {})
                roles = user_data.get('roles', [])
                
                print(f"   üö® VULNERABILITY CONFIRMED!")
                print(f"   ‚Üí Login succeeded when it should have been blocked")
                print(f"   ‚Üí User would gain access to: {len(roles)} roles")
                
                if roles:
                    for role in roles[:2]:  # Show first 2 roles
                        role_name = role.get('role_name', 'Unknown')
                        permissions = role.get('permissions', {})
                        print(f"   ‚Üí Role: {role_name}")
                        print(f"   ‚Üí Admin Access: {permissions.get('system_administration', False)}")
                        
            else:
                print(f"   ‚úÖ Attack blocked: {response.status_code}")
                
        except Exception as e:
            print(f"   ‚ùå Test error: {e}")

def demonstrate_solution():
    """Show how OVT-API-Token would solve this"""
    print(f"\nüîí PROPOSED SOLUTION: OVT-API-TOKEN TENANT ISOLATION")
    print("=" * 60)
    
    solution_steps = [
        "1. Each tenant gets unique OVT-API-Token",
        "2. Frontend includes token in all requests", 
        "3. API validates token before authentication",
        "4. Database lookup filtered by token's tenant",
        "5. Cross-tenant login becomes impossible"
    ]
    
    for step in solution_steps:
        print(f"   {step}")
    
    print(f"\nüìã IMPLEMENTATION PLAN:")
    print(f"   ‚Ä¢ Add OVT-API-Token header validation")
    print(f"   ‚Ä¢ Modify auth functions to require tenant context")
    print(f"   ‚Ä¢ Update frontend to include tenant tokens")
    print(f"   ‚Ä¢ Test that cross-tenant attacks are blocked")

def main():
    """Run security vulnerability tests"""
    print("üõ°Ô∏è ONEVAULT SECURITY VULNERABILITY ASSESSMENT")
    print("=" * 60)
    print(f"Testing API: {API_BASE_URL}")
    print(f"Timestamp: {datetime.now().isoformat()}")
    print("\n‚ÑπÔ∏è  This test demonstrates the critical security issue")
    print("   where users can login across tenant boundaries.")
    
    test_cross_tenant_attack()
    demonstrate_solution()
    
    print(f"\nüéØ IMMEDIATE ACTION REQUIRED:")
    print(f"   Implement OVT-API-Token tenant isolation ASAP!")

if __name__ == "__main__":
    main() 